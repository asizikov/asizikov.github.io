<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>devops on Anton Sizikov</title>
    <link>https://blog.cloud-eng.nl/tags/devops/</link>
    <description>Recent content in devops on Anton Sizikov</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 03 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.cloud-eng.nl/tags/devops/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Configure WSL2 limits on Windows 10</title>
      <link>https://blog.cloud-eng.nl/2021/02/03/wsl2-limits-vmmem/</link>
      <pubDate>Wed, 03 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.cloud-eng.nl/2021/02/03/wsl2-limits-vmmem/</guid>
      <description>WSL2 on Windows 10 has some issues, but I still prefere it to run my docker containers locally.
One of the problems which used to bug me a lot was the memory consumption by Vmmem process.
The memory consumption goes though the roof. Even on 32GB machine you may run out of memory.
I can&amp;rsquo;t fix the problem, but at least I know how to patch it up. Here is what I do:</description>
    </item>
    
    <item>
      <title>Configure CD for Azure WebApp with Terraform Provider for Octopus Deploy</title>
      <link>https://blog.cloud-eng.nl/2021/01/27/terraform-octopus-deploy/</link>
      <pubDate>Wed, 27 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.cloud-eng.nl/2021/01/27/terraform-octopus-deploy/</guid>
      <description>In this post, I&amp;rsquo;m going to configure the continuous delivery process for Azure WebApp (Azure Function in this case, but that&amp;rsquo;s pretty much the same) with Octopus Deploy. To make it a little bit interesting I&amp;rsquo;m going to use Configuration-as-Code approach with a brand new Octopus provider for Terraform.
Buckle up and let&amp;rsquo;s get started&amp;hellip;
Tools Terraform I&amp;rsquo;m going to need terraform on my machine:
Octopus Deploy For this post, I&amp;rsquo;ve signed up for a free tier of Octopus Deploy SaaS offering.</description>
    </item>
    
    <item>
      <title>Using GitHub Container Registry with Kubernetes</title>
      <link>https://blog.cloud-eng.nl/2020/10/08/using-github-registry-with-k8s/</link>
      <pubDate>Thu, 08 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.cloud-eng.nl/2020/10/08/using-github-registry-with-k8s/</guid>
      <description>GitHub Container Registry was introduced on the 1st of September 2020. It&amp;rsquo;s still in the Beta stage, so it&amp;rsquo;s rather not recommended to use it in production. However, it offers us free private storage for our Docker images, at least until the end of the Beta period.
Private storage, free and unlimited download&amp;hellip; looks like a good enough option for local development.
In this post, I&amp;rsquo;m going to configure my local Kubernetes cluster to pull images from my GitHub Container Registry.</description>
    </item>
    
    <item>
      <title>Docker image tests</title>
      <link>https://blog.cloud-eng.nl/2020/09/29/container-tests/</link>
      <pubDate>Tue, 29 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.cloud-eng.nl/2020/09/29/container-tests/</guid>
      <description>Today we&amp;rsquo;re going to set up a CI/CD GitHub Action with a Container Structure Test step which will help us to enforce the certain quality policies for the images which we build and ship.
It&amp;rsquo;s a good idea to review your docker images. First of all, it can save time, disk space, and money.
When our images are lean the build time is reduced as well as the pull and startup time.</description>
    </item>
    
    <item>
      <title>Provision your Azure environment with Terraform and Octopus Deploy</title>
      <link>https://blog.cloud-eng.nl/2020/03/21/azure-terraform-octopus/</link>
      <pubDate>Sat, 21 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.cloud-eng.nl/2020/03/21/azure-terraform-octopus/</guid>
      <description>My current project has reached the point where we have to manage our infrastructure in a more organized way rather than ad-hoc manual configurations.
Current landscape We use a pretty standard setup for a .NET web application.
We keep our code in one monorepo hosted in internal GitLab. We use TeamCity to build our code and we use Octopus Deploy to run our deployments to Azure.
We have several environments (let&amp;rsquo;s call them feature, test, and prod) and they all are different.</description>
    </item>
    
    <item>
      <title>CatLight</title>
      <link>https://blog.cloud-eng.nl/2016/04/05/catlight-tool/</link>
      <pubDate>Tue, 05 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.cloud-eng.nl/2016/04/05/catlight-tool/</guid>
      <description>It&amp;rsquo;s hard to imagine modern development without continuous intergation and unit-tests.
At work I hardly pay attention on the process, it just works: I push code to GitHub, later on TeamCity picks up changes and starts the build, and few minutes after I receive Slack or email notification about the result. However for my personal projects things are different. I&amp;rsquo;m using free plan on AppVeyor. It works pretty well except the fact that your build might stay in the queue for a while.</description>
    </item>
    
    <item>
      <title>Fully automated Continuous Integration for your Open Source library for free</title>
      <link>https://blog.cloud-eng.nl/2016/01/10/full-stack-ci-for-free/</link>
      <pubDate>Sun, 10 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.cloud-eng.nl/2016/01/10/full-stack-ci-for-free/</guid>
      <description>This is a long title. Well, the post is going to be long as well.
I want to show how you can set up the CI pipeline using free services and tools.
 GitHub GitVersion AppVeyor  As an example I&amp;rsquo;m going to use my pet project: AsyncSuffix plugin for ReSharper. The reason is that the way you pack and publish R# extensions is slightly different from the regular NuGet package.</description>
    </item>
    
    <item>
      <title>GitHub Deployment statuses</title>
      <link>https://blog.cloud-eng.nl/2015/11/01/github-deployments/</link>
      <pubDate>Sun, 01 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.cloud-eng.nl/2015/11/01/github-deployments/</guid>
      <description>Itâ€™s very important to collect and track as much information as you can about your system. We have logging, monitoring, reports and analytics. All the systems that we build are not just packages, which are deployed to the server/computer or device. Everything starts with Issue Tracking system and through the code goes to production. The code and the process of coding both look like an important part of the system and it makes a lot of sense to collect and store all the data about code.</description>
    </item>
    
  </channel>
</rss>
