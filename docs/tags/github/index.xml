<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>github on Anton Sizikov</title>
    <link>https://blog.cloud-eng.nl/tags/github/</link>
    <description>Recent content in github on Anton Sizikov</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 08 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.cloud-eng.nl/tags/github/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using GitHub Container Registry with Kubernetes</title>
      <link>https://blog.cloud-eng.nl/2020/10/08/using-github-registry-with-k8s/</link>
      <pubDate>Thu, 08 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.cloud-eng.nl/2020/10/08/using-github-registry-with-k8s/</guid>
      <description>GitHub Container Registry was introduced on the 1st of September 2020. It&amp;rsquo;s still in the Beta stage, so it&amp;rsquo;s rather not recommended to use it in production. However, it offers us free private storage for our Docker images, at least until the end of the Beta period.
Private storage, free and unlimited download&amp;hellip; looks like a good enough option for local development.
In this post, I&amp;rsquo;m going to configure my local Kubernetes cluster to pull images from my GitHub Container Registry.</description>
    </item>
    
    <item>
      <title>Fully automated Continuous Integration for your Open Source library for free</title>
      <link>https://blog.cloud-eng.nl/2016/01/10/full-stack-ci-for-free/</link>
      <pubDate>Sun, 10 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.cloud-eng.nl/2016/01/10/full-stack-ci-for-free/</guid>
      <description>This is a long title. Well, the post is going to be long as well.
I want to show how you can set up the CI pipeline using free services and tools.
 GitHub GitVersion AppVeyor  As an example I&amp;rsquo;m going to use my pet project: AsyncSuffix plugin for ReSharper. The reason is that the way you pack and publish R# extensions is slightly different from the regular NuGet package.</description>
    </item>
    
    <item>
      <title>How to convince Linus Torvalds to contribute to your project</title>
      <link>https://blog.cloud-eng.nl/2015/11/03/abusing-github/</link>
      <pubDate>Tue, 03 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.cloud-eng.nl/2015/11/03/abusing-github/</guid>
      <description>Look at all those famous people committing to some random developer’s boring repository.
Why would they do that? In fact, they don’t.
In general, git is just a tool that allows you to create patches and distribute them around by email.
When you create a commit, it will be signed with your name and email. Look at the author part here:
You have your name listed twice for every commit. You are both the author and the committer.</description>
    </item>
    
    <item>
      <title>GitHub Deployment statuses</title>
      <link>https://blog.cloud-eng.nl/2015/11/01/github-deployments/</link>
      <pubDate>Sun, 01 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.cloud-eng.nl/2015/11/01/github-deployments/</guid>
      <description>It’s very important to collect and track as much information as you can about your system. We have logging, monitoring, reports and analytics. All the systems that we build are not just packages, which are deployed to the server/computer or device. Everything starts with Issue Tracking system and through the code goes to production. The code and the process of coding both look like an important part of the system and it makes a lot of sense to collect and store all the data about code.</description>
    </item>
    
    <item>
      <title>Avoid typing user name when committing to GitHub repository</title>
      <link>https://blog.cloud-eng.nl/2015/09/05/change-origin-for-github-repo/</link>
      <pubDate>Sat, 05 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.cloud-eng.nl/2015/09/05/change-origin-for-github-repo/</guid>
      <description>I use different accounts and different computers to work with GitHub repositories, so sometimes I face the situation when I don&amp;rsquo;t have my SSH key generated for the current environment.
I can still work with my command line tool, however I have to type credentials every time I want to pull or push to the remote.
Actually I&amp;rsquo;m fine with typing the password, but not the user name. So what can I do (besides generating new SSH key and adding it to my Git/GitHub account) is to update the remote to have my user name in it.</description>
    </item>
    
  </channel>
</rss>
